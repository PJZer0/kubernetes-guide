#!/usr/sbin/nft -f

table inet proxy
delete table inet proxy

table inet proxy {

    # 保留网段，参考：https://zh.wikipedia.org/zh-sg/%E4%BF%9D%E7%95%99IP%E5%9C%B0%E5%9D%80
    set byp4 {
        typeof ip daddr
        flags interval
        elements = {
            0.0.0.0/8,
            10.0.0.0/8,
            100.64.0.0/10,
            127.0.0.0/8,
            169.254.0.0/16,
            172.16.0.0/12,
            192.0.0.0/24,
            192.0.2.0/24,
            192.88.99.0/24,
            192.168.0.0/16,
            198.18.0.0/15,
            198.51.100.0/24,
            203.0.113.0/24,
            224.0.0.0/4,
            240.0.0.0/4
        }
    }
    set byp6 {
        typeof ip6 daddr
        flags interval
        elements = {
            ::,
            ::1,
            ::ffff:0:0:0/96,
            100::/64,
            64:ff9b::/96,
            2001::/32,
            2001:10::/28,
            2001:20::/28,
            2001:db8::/32,
            2002::/16,
            fc00::/7,
            fe80::/10,
            ff00::/8
        }
    }

    chain prerouting {
        type filter hook prerouting priority filter; policy accept;

        # 只拦截内网部分设备（10.10.10.0/28 用于拦截内网部分指定设备的流量，10.42.0.0/16 用于拦截容器网络流量）
        fib saddr type != local ip saddr != { 10.10.10.0/28, 10.42.0.0/16 } counter return 

        # 放行发往 local 的。如果连接已被 tproxy 拦截，后续流量会被认为是 local 的（代理会在本机监听目标公网地址），也会命中该规则，直接 return 避免再次被 tproxy 拦截
        fib daddr type local counter return

        # 放行 reply 方向的
        ct direction reply counter return

        # 将局域网设备访问公网的流量标记为需要拦截
        meta l4proto {tcp,udp} ct mark != 1 ct state new,related counter jump do_proxy

        # 拦截已经标记要拦截的流量（连接的第一个包在这里被 tproxy 到代理进程，然后代理进程会监听目标地址，后续的包无需拦截就可以被转发给代理进程）
        meta l4proto {tcp,udp} ct mark 1 tproxy to :12345 meta mark set 1 counter
    }

    chain do_proxy {

        # 放行内网
        ip daddr @byp4 counter return
        ip6 daddr @byp6 counter return

        # 其余全部打上 mark，标记流量需要拦截
        ct mark set 1 counter
    }

    chain output {
        type route hook output priority filter; policy accept;

        # 放行发往 local 的
        fib daddr type local counter return

        # 放行 reply 方向的
        ct direction reply counter return

        # 放行代理发出的包。
        meta skgid eq 23333 counter return

        # 尝试给需要拦截的连接进行 mark
        meta l4proto {tcp,udp} ct state new,related counter jump do_proxy

        # 让报文走策略路由重新进入 PREROUTING，以便被代理。
        ct mark 1 meta mark set 1 counter
    }
}
